-- @path uiModel=/ui2html/uiModel.ecore
-- @path htmlModel=/ui2html/htmlModel.ecore

module ui2html;

create OUT: htmlModel from IN: uiModel;

helper context uiModel!Static def : isText() : Boolean =
    self.type = #Text;

helper context uiModel!Static def : isImage() : Boolean =
    self.type = #Image;

helper context uiModel!List def : isOrdered() : Boolean =
    self.type = #ordered;

helper context uiModel!List def : isUnordered() : Boolean =
    self.type = #unordered;

helper context uiModel!Action def : isButton() : Boolean =
	self.type = #LeftClick or self.type = #RightClick or self.type = #DoubleClick;
	
helper context uiModel!Action def : isInput() : Boolean =
	self.type = #Write;

rule UIModel2HTMLDocument {
	from 
		s: uiModel!UIModel
	to 
		t: htmlModel!HTMLDocument (
			title <- s.title,
			body <- s.elements->collect(e | e)
		)
}

rule Container2DivContainer {
	from
		s: uiModel!Container
	to
		t: htmlModel!DivContainer (
			id <- s.id,
			style <- s.style,
			children <- s.children->collect(e | e)
		)
}

rule List2OrderedList {
    from
        s: uiModel!List (s.isOrdered())
    to
        t: htmlModel!OrderedList (
            children <- s.children->collect(e | e)
        )
}

rule List2UnorderedList {
    from
        s: uiModel!List (s.isUnordered())
    to
        t: htmlModel!UnorderedList (
            children <- s.children->collect(e | e)
        )
}

rule Static2Text {
	from
        s: uiModel!Static (s.isText())
    to
        t: htmlModel!Text (
            text <- s.content
        )
}

rule Static2Image {
	from
        s: uiModel!Static (s.isImage())
    to
        t: htmlModel!Image (
            path <- s.content
        )
}

rule Action2Button {
    from
        s: uiModel!Action (s.isButton())
    to
        t: htmlModel!Button (
            label <- s.content
        )
}

rule Action2Input {
    from
        s: uiModel!Action (s.isInput())
    to
        t: htmlModel!Input (
            value <- s.content
        )
}
